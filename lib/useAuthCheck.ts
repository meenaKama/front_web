"use client"
import { useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { Dispatch, Selector } from '@/lib/hooks'; // Assurez-vous d'utiliser vos hooks typÃ©s
import { selectUser, selectUserStatus, whoIsLog} from '@/features/users/userSlice';


export const useAuthCheck = () => {
    // ğŸ›‘ COUPE-CIRCUIT : Garantie que la vÃ©rification ne sera lancÃ©e qu'une seule fois.
    const hasAttempted = useRef(false); 
    
    const dispatch = Dispatch();
    const user = Selector(selectUser);
    const status = Selector(selectUserStatus);
    const router = useRouter();

    useEffect(() => {
        // Conditions d'arrÃªt :
        // 1. L'utilisateur est dÃ©jÃ  chargÃ©.
        // 2. La vÃ©rification a dÃ©jÃ  Ã©tÃ© tentÃ©e (rÃ©ussie ou Ã©chouÃ©e).
        // 3. Le statut est en cours de chargement (loading) ou a dÃ©jÃ  Ã©chouÃ© (failed).
        if (user || hasAttempted.current || status === 'loading' || status === 'failed') {
            return;
        }

        // Marque l'appel comme lancÃ© pour empÃªcher les relances futures.
        hasAttempted.current = true; 

        // ğŸš€ Lance la vÃ©rification d'authentification
        dispatch(whoIsLog())
            .unwrap() // Utilise unwrap pour gÃ©rer les rejets dans le .catch
            .then(() => {
                // Si succÃ¨s (Access Token valide ou Refresh rÃ©ussi), rediriger.
                router.replace('/dashboard'); 
            })
            .catch(() => {
                // Si Ã©chec (401 final), l'intercepteur a dÃ©jÃ  mis Ã  jour l'Ã©tat Redux (logout/status: 'failed').
                // Le hook s'arrÃªte grÃ¢ce Ã  'hasAttempted.current' et 'status === "failed"'.
                // L'utilisateur reste sur la page de connexion.
            });

    }, [dispatch, user, status, router]); 

    // Retourne l'Ã©tat de chargement
    return { isLoading: status === 'loading' }; 
};